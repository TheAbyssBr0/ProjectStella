package git.stella.model.generator;

import git.stella.model.character.CharacterContainer;
import git.stella.model.key.KeyContainer;
import git.stella.model.user.User;
import org.bouncycastle.crypto.generators.Argon2BytesGenerator;
import org.bouncycastle.crypto.params.Argon2Parameters;

import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

/**
 * Generates the passwords using argon2di hashing algorithm
 */
public class Generator {
    /** user object that contains user information */
    private final User user;

    /**
     * Constructor for generator
     */
    public Generator(User user) {
        this.user = user;
    }

    /**
     * Helper function for getPassword. Calculates argon hash
     * @param service String name of the service
     * @param len half length of generated byte array, length of password (2 array items -> 1 password character)
     * @param num password number. Useful to have multiple passwords for same site
     * @param var variation of password to help with password character requirements
     * @return the byte array containing the argon 2di hash
     */
    private byte[] generateHash(String service, int len, int num, int var) {
        /* from:
        https://github.com/bcgit/bc-java/blob/master/core/src/test/java/org/bouncycastle/crypto/test/Argon2Test.java
         */
        byte[] salt = (service + num + var).getBytes(StandardCharsets.US_ASCII);
        Argon2Parameters.Builder builder = new Argon2Parameters.Builder(Argon2Parameters.ARGON2_id)
                .withVersion(Argon2Parameters.ARGON2_id)
                .withIterations(3)
                .withMemoryPowOfTwo(15)
                .withParallelism(2)
                .withSalt(salt);

        Argon2BytesGenerator gen = new Argon2BytesGenerator();
        gen.init(builder.build());
        byte[] result = new byte[len * 2];
        gen.generateBytes(user.getInfo().getBytes(StandardCharsets.US_ASCII), result, 0, result.length);
        return result;
    }

    /**
     * Helper function for getPassword. Converts 2 bytes into an integer by concatenation
     * @param b1 the first byte
     * @param b2 the second byte
     * @return an integer resulting from concatenation of the input bytes
     */
    private int intConvert(byte b1, byte b2) {
        byte[] arr = new byte[4];
        arr[0] = 0; arr[1] = 0;
        arr[2] = b1; arr[3] = b2;
        ByteBuffer intBuff = ByteBuffer.wrap(arr);
        return intBuff.getInt();
    }

    /**
     * Returns password based on given parameters
     * @param service String representation of service the password is for e.g. twitter
     * @param key KeyContainer object that contains the legal character type information (upper, lower, etc.)
     * @param len length of required password
     * @param num password number. Useful for having multiple passwords under same site name
     * @return String representation of password
     */
    public String getPassword(String service, KeyContainer key, int len, int num) {
        int variation = 0;
        StringBuilder pass;
        byte[] hash;
        CharacterContainer container;
        do {
            pass = new StringBuilder();
            container = new CharacterContainer(key.getByte());
            hash = generateHash(service, len, num, variation);
            for(int i = 0, index; i < len; ++i) {
                index = intConvert(hash[i * 2 + 1], hash[i * 2]);
                pass.append(container.nextChar(index));
            }

            ++variation;
        } while (container.getCharsUsed() != key.getByte());
        return pass.toString();
    }
}
